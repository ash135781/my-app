{"version":3,"sources":["logo.svg","componentss/Navbar.js","componentss/Form.js","componentss/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","pro","className","mode","href","text","type","id","set","role","tabindex","class","onClick","toggleMode","style","color","change","htmlFor","toggleMode1","change1","toggleMode2","change2","Form","props","useState","textChange","backgroundColor","heading","onChange","event","console","log","target","value","rows","placeholder","newText","toUpperCase","showalert","toLowerCase","trimEnd","split","length","toFixed","Alert","alert","word","lower","charAt","slice","capital","msg","App","modes","setMode","setchgtext1","setchgtext2","allert","setalert","ggetsmart","command2","type2","command","gggetsmart","commandd","typee","message","setTimeout","document","body","title","prototype","PropTypes","string","isRequired","defaultProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.13308896.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\n\r\nexport default function Navbar(pro) {\r\n  \r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${pro.mode} bg-${pro.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{pro.text}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-a active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-a\" href=\"#\">{pro.set}</a>\r\n        </li>\r\n        <li className=\"nav-item dropdown\">\r\n          <a className=\"nav-a dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n            Dropdown\r\n          </a>\r\n          <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n            <li><a className=\"dropdown-item\" href=\"#\">Action</a></li>\r\n            <li><a className=\"dropdown-item\" href=\"#\">Another action</a></li>\r\n            <li><hr className=\"dropdown-divider\"/></li>\r\n            <li><a className=\"dropdown-item\" href=\"#\">Something else here</a></li>\r\n          </ul>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-a disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n        </li>\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n      <div class=\"form-check form-switch\">\r\n  <input onClick={pro.toggleMode} class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n    <label style={{color: pro.change === 'Enable light Mode'?\"white\" : \"black\"}} class={`form-check-label text-`} htmlFor=\"flexSwitchCheckDefault\">{pro.change}</label>\r\n  \r\n  <div>\r\n  <input onClick={pro.toggleMode1} class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label style={{color: pro.change1 === 'Enable light Mode'?\"white\" : \"green\"}} class={`form-check-label text-`} htmlFor=\"flexSwitchCheckDefault\">{pro.change1}</label>\r\n\r\n    </div>\r\n  <input onClick={pro.toggleMode2} class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label style={{color: pro.change2 === 'Enable light Mode'?\"white\" : \"#4c5eb5\"}} class={`form-check-label text-`} htmlFor=\"flexSwitchCheckDefault\">{pro.change2}</label>\r\n</div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n      </>\r\n    )\r\n}\r\nNavbar.prototype = {\r\n    text: PropTypes.string.isRequired,\r\n    set: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    text : 'Textutils',\r\n    set: 'About'\r\n}\r\n","import React, {useState} from 'react'\r\n\r\n\r\nexport default function Form(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        textChange(newText)\r\n        props.showalert('converted to upper case',\"success\")\r\n    }\r\n    const handledClick = () =>{\r\n        let newText = text.toLowerCase();\r\n        textChange(newText)\r\n        props.showalert('converted to lower case',\"success\")\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        console.log(\"OnChange\")\r\n        textChange(event.target.value)\r\n    }\r\n    const [text,textChange] = useState(\"enter text here\");\r\n    return (\r\n\r\n        <>\r\n      <div style={{backgroundColor: props.mode===\"light\"?\"white\":\"grey\" }}>\r\n          <h3 style={{backgroundColor: props.mode===\"light\"?\"grey\":\"white\"}}>{props.heading}</h3>\r\n          <div className=\"mb-3\">\r\n          <textarea onChange={handleOnChange} style={{backgroundColor: props.mode===\"dark\"?\"white\":\"grey\",color: props.mode===\"dark\"?\"grey\":\"white\"}}  className=\"form-control\" id='mybox' rows='8' placeholder={text}></textarea>\r\n      </div>\r\n      <button onClick={handleUpClick} className='btn btn-primary '>convert to uppercase</button>\r\n      <button onClick={handledClick} className='btn btn-primary mx-4'>convert to lowercase</button>\r\n      </div>\r\n      <div style={{backgroundColor: props.mode===\"light\"?\"white\":\"grey\",color: props.mode===\"dark\"?\"white\":\"grey\"}} className=\"container my-3\">\r\n          <h1>Your Summary</h1>\r\n          <p>{text.trimEnd().split(/[ ]+/).length} words,{text.length} characters</p>\r\n          <p>{0.008 * text.split(\" \").length.toFixed(3)} minutes read</p>\r\n          <h2>preview</h2>\r\n          <p>{text.length>0?text:\"kuch daal bhai\"}</p>\r\n      </div>\r\n\r\n        </>\r\n    )\r\n}","import React from 'react'\r\n\r\n export default function Alert(props) {\r\n    const capital = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n     props.alert &&   <div className={`alert alert-${props.alert.type} alert-dismissible fade show`}  role=\"alert\">\r\n  <strong>{capital(props.alert.type)}</strong>: {props.alert.msg}\r\n  \r\n</div>\r\n    )\r\n}\r\n","import logo from './logo.svg';\nimport Navbar from './componentss/Navbar';\nimport Form from './componentss/Form'\n// import About from './componentss/About';\nimport React, { useState } from 'react'\nimport Alert from './componentss/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nexport default function App() {\n  const [modes, setMode] = useState(\"dark\")\n  const [chgtext, setchgtext] = useState(\"Enable Light Mode\")\n  const [chgtext1, setchgtext1] = useState(\"Enable Light Mode\")\n  const [chgtext2, setchgtext2] = useState(\"Enable Light Mode\")\n  const [allert, setalert] = useState(null)\n  let getsmart = (command,type) => {\n    setchgtext1( {\n      command : command,\n      type : type\n    })\n  }\n    let ggetsmart = (command2,type2) => {\n      setchgtext2( {\n        command : command2,\n        type : type2\n      })\n  }\n  let gggetsmart = (commandd,typee) => {\n    setchgtext2( {\n      command : commandd,\n      type : typee\n    })\n}\n  let showalert=(message,type) => {\n    setalert({\n    msg: message,\n    type: type\n  })\n  setTimeout(() => {\n  setalert(null)\n  },3000)\n}\n  const toggleMode = ()=>{\n if(modes === 'light'){\n   setMode(\"dark\")\n   gggetsmart(\"Enable light Mode\", document.body.style.backgroundColor = \"grey\")\n   \n   \n   document.title = \"textUtils-DarkMode\"\n   showalert(\"dark mode has enabled\",\"success\")\n   \n  }\n  \n  else{\n    \n    \n    gggetsmart(\"Enable green Mode\", document.body.style.backgroundColor = \"white\")\n   \n   setMode(\"light\")\n   document.title = \"textUtils-LightMode\"\n     \n     showalert(\"light mode has enabled\",\"success\")\n\n }\n  }\n  const toggleMode1 = ()=>{\n    if(modes === 'light'){\n      setMode(\"dark\")\n      gggetsmart(\"Enable light Mode\", document.body.style.backgroundColor = \"grey\")\n      \n      \n      \n      showalert(\"dark mode has enabled\",\"success\")\n      \n     }\n     \n     else{\n       \n      \n       ggetsmart(\"Enable green Mode\", document.body.style.backgroundColor = \"#3c523c\")\n      \n      setMode(\"light\")\n        \n        showalert(\"green mode has enabled\",\"success\")\n   \n    }\n     }\n     const toggleMode2 = ()=>{\n      if(modes === 'light'){\n        setMode(\"dark\")\n        ggetsmart(\"Enable light Mode\", document.body.style.backgroundColor = \"grey\")\n        \n        \n        \n        showalert(\"dark mode has enabled\",\"success\")\n        \n       }\n       \n       else{\n         \n         \n         ggetsmart(\"Enable Dark Mode\", document.body.style.backgroundColor = \"#4c5eb5\")\n        setMode(\"light\")\n          \n          showalert(\"blue mode has enabled\",\"success\")\n     \n      }\n       }\n  return (\n    <>\n    \n\n    <Navbar change1={getsmart} change2={ggetsmart} change={gggetsmart}  mode= {modes} toggleMode={toggleMode} toggleMode2={toggleMode1} toggleMode1={toggleMode2}/>\n    <Alert alert= {allert}  />\n    <div className='container my-3'>\n      <Form showalert= {showalert} mode= {modes} /> \n      {/* <Form heading=\"enter the te xt\"/> */}\n\n    </div>\n    \n  \n    </>\n  );\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}